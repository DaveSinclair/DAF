/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _DAF_PROTOCOL_H_RPCGEN
#define _DAF_PROTOCOL_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define MAX_SQLSERVERNAME_LEN 64
#define MAX_SQLUSERNAME_LEN 64
#define MAX_SQLPASSWORD_LEN 64
#define MAX_SQLDATABASENAME_LEN 64
#define MAX_MSG_LEN 512
#define MAX_HOSTNAME_LEN 64
#define MAX_PATHNAME_LEN 128
#define MAX_FILEHANDLE_LEN 64
#define MAX_SYSTEM_CMD_LEN 1024
#define E_OK 0
#define E_NOTOK 1
#define MAX_CMD_LEN 1024
#define MAX_CMD_OUTPUT_LINE_LEN 1024
#define MAX_IDENT_LEN 32
#define DAF_DATABASE_NAME_LEN 64
#define DAF_TABLE_NAME_LEN 64
#define DAF_PROJECT_LEN 24
#define DAF_PROJECTDESCRIPTION_LEN 256
#define DAF_PHASE_LEN 24
#define DAF_REQUESTTYPE_LEN 32
#define DAF_SCENARIO_LEN 48
#define DAF_AUTHOR_LEN 32
#define DAF_ACTIONTYPE_LEN 32
#define DAF_LOGFILNAME_LEN 64
#define DAF_STATE_LEN 24
#define DAF_STATUS_LEN 32
#define DAF_STATEMODIFIER_LEN 32
#define DAF_TESTCASE_LEN 64
#define DAF_TESTCASE_DESCRIPTION_LEN 64
#define DAF_TESTSTAND_LEN 32
#define DAF_TESTSTAND_COMMENTS_LEN 128
#define DAF_INVOCATION_LEN 1024
#define DAF_DURATION_LEN 24
#define DAF_LOGLOCATION_LEN 128
#define DAF_LOGDIRECTORY_LEN 128
#define DAF_COMMENTS_LEN 256
#define DAF_PARAMETERS_LEN 256
#define DAF_SCENARIORESULT_NAME_LEN 32
#define DAF_SCENARIORESULT_PASS_LEN 3
#define DAF_SCENARIORESULT_START_LEN 24
#define DAF_SCENARIORESULT_END_LEN 24
#define DAF_SCENARIORESULT_TESTSTAND_LEN 32
#define DAF_SCENARIORESULT_TESTER_LEN 32
#define DAF_SCENARIORESULT_LOGLOCATION_LEN 128
#define DAF_SCENARIORESULT_COMMENTS_LEN 256
#define DAF_ACTIONRESULT_NAME_LEN 32
#define DAF_ACTIONRESULT_STATUS_LEN 32
#define DAF_ACTIONRESULT_INVOCATION_LEN 1024
#define DAF_ACTIONRESULT_PASS_LEN 3
#define DAF_ACTIONRESULT_START_LEN 24
#define DAF_ACTIONRESULT_END_LEN 24
#define DAF_ACTIONRESULT_COMMENTS_LEN 256
#define DAF_CLUSTER_NAME_LEN 32
#define DAF_CLUSTER_COMMENTS_LEN 128
#define DAF_NODE_NAME_LEN 32
#define DAF_NODE_MODEL_LEN 16
#define DAF_NODE_SERIAL_LEN 16
#define DAF_NODE_COMMENTS_LEN 128
#define DAF_JOBNAME_LEN 48
#define DAF_TESTSTAND_LEN 32
#define DAF_LEVEL_LEN 32
#define DAF_TESTLEVEL_LEN 32
#define DAF_TESTER_LEN 32
#define DAF_HOSTSELECTORTYPE_NAME_LEN 16
#define DAF_HOSTSELECTORVALUE_NAME_LEN 32
#define DAF_ACTIONDESCRIPTION_LEN 64
#define DAF_HOST_NAME_LEN 32
#define DAF_HOST_TYPE_LEN 16
#define DAF_HOST_MODEL_LEN 16
#define DAF_HOST_SERIAL_LEN 16
#define DAF_HOST_HOSTSELECTORVALUE_LEN 32
#define DAF_HOST_COMMENTS_LEN 128
#define DAF_HOST_AGENTSTATUS_LEN 16
#define DAF_COLLECTORVALUE_LEN 256
#define DAF_COMPARATOR_LEN 3
#define DAF_COLLECTORTYPE_NAME_LEN 32
#define DAF_COLLECTORTYPE_OSTYPE_LEN 32
#define DAF_COLLECTORTYPE_INVOCATION_LEN 256
#define DAF_ENVIRONMENT_NAME_LEN 32
#define DAF_ENVIRONMENT_DESCRIPTION_LEN 128
#define DAF_ENVIRONMENTVALUE_NAME_LEN 32
#define DAF_ENVIRONMENTVALUE_VALUE_LEN 255
#define DAF_PATHNAME_LEN 128
#define DAF_FILENAME_LEN 64
#define DAF_COLLECTORSET_NAME_LEN 32
#define DAF_COLLECTORSET_DESCRIPTION_LEN 128
#define DAF_MAX_NUM_COLLECTOR_TYPES 20
#define DAF_OUTCOMEACTION_NAME_LEN 32
#define DAF_ACTIONONPASS_LEN 24
#define DAF_ACTIONONFAIL_LEN 24
#define DAF_ERRORACTION_LEN 24
#define DAF_NOTIFICATIONONPASS_LEN 24
#define DAF_NOTIFICATIONONFAIL_LEN 24
#define DAF_OUTCOMEACTION_LEN 32
#define DAF_FIRSTNAME_LEN 32
#define DAF_LASTNAME_LEN 32
#define DAF_AREA_LEN 32
#define DAF_EMAIL_LEN 64
#define DAF_PASSWORD_LEN 32
#define DAF_MAILLIST_LEN 32
#define DAF_MAILDESCRIPTION_LEN 128
#define DAF_OBJECTTYPENAME_LEN 32
#define DAF_OBJECTTYPEDESCRIPTION_LEN 128
#define DAF_OBJECTNAME_LEN 32
#define DAF_TESTLEVEL_DESCRIPTION_LEN 128
#define DAF_LICENCE_LEN 49

typedef int BOOL;

typedef u_quad_t Iu64;

typedef u_int Iu32;

typedef u_short Iu16;

typedef u_char Iu8;

typedef char *pathnamestring;

typedef char *hostnamestring;

enum remote_client_error_types {
	REMOTE_CLIENT_OK = 0,
	REMOTE_CLIENT_ERROR_NO_FREE_REMOTE_CLIENTS = 1,
	REMOTE_CLIENT_COULD_NOT_MOUNT = 2,
	REMOTE_CLIENT_COULD_NOT_UMOUNT = 3,
	REMOTE_CLIENT_ERROR_CANNOT_DESTROY_RPC_CLIENT = 4,
};
typedef enum remote_client_error_types remote_client_error_types;

enum remote_client_clear_tag_error_types {
	REMOTE_CLEAR_TAG_OK = 0,
	REMOTE_CLEAR_TAG_DOES_NOT_EXIST = 1,
	REMOTE_CLEAR_TAG_NOT_IN_COMPLETED_STATE = 2,
	REMOTE_CLEAR_TAG_FAILED = 3,
};
typedef enum remote_client_clear_tag_error_types remote_client_clear_tag_error_types;

enum remote_client_clear_ident_error_types {
	REMOTE_CLEAR_IDENT_OK = 0,
	REMOTE_CLEAR_IDENT_NOT_IN_COMPLETED_STATE = 1,
	REMOTE_CLEAR_IDENT_FAILED = 2,
};
typedef enum remote_client_clear_ident_error_types remote_client_clear_ident_error_types;

enum remote_client_query_alltags_error_types {
	REMOTE_QUERY_ALLTAGS_OK = 0,
	REMOTE_QUERY_ALLTAGS_FAILED = 1,
};
typedef enum remote_client_query_alltags_error_types remote_client_query_alltags_error_types;

enum remote_client_cancel_tag_error_types {
	REMOTE_CANCEL_TAG_OK = 0,
	REMOTE_CANCEL_TAG_DOES_NOT_EXIST = 1,
	REMOTE_CANCEL_TAG_COMMAND_ALREADY_COMPLETED = 2,
	REMOTE_CANCEL_TAG_KILLPG_FAILED = 3,
};
typedef enum remote_client_cancel_tag_error_types remote_client_cancel_tag_error_types;

enum remote_client_cancel_ident_error_types {
	REMOTE_CANCEL_IDENT_OK = 0,
	REMOTE_CANCEL_IDENT_DOES_NOT_EXIST = 1,
	REMOTE_CANCEL_IDENT_COMMAND_ALREADY_COMPLETED = 2,
	REMOTE_CANCEL_IDENT_KILLPG_FAILED = 3,
};
typedef enum remote_client_cancel_ident_error_types remote_client_cancel_ident_error_types;

enum remote_client_copyfile_error_types {
	REMOTE_COPYFILE_OK = 0,
	REMOTE_COPYFILE_FILE_DOES_NOT_EXIST = 1,
	REMOTE_COPYFILE_MALLOC_ERROR = 2,
	REMOTE_COPYFILE_FAILED = 3,
	REMOTE_COPYFILE_COULD_NOT_OPEN_FOR_WRITE = 4,
	REMOTE_COPYFILE_COULD_NOT_WRITE_REQUESTED_LENGTH = 5,
};
typedef enum remote_client_copyfile_error_types remote_client_copyfile_error_types;

enum remote_client_deletefile_error_types {
	REMOTE_DELETEFILE_OK = 0,
	REMOTE_DELETEFILE_FILE_DOES_NOT_EXIST = 1,
	REMOTE_DELETEFILE_COULD_NOT_DELETE_FILE = 2,
};
typedef enum remote_client_deletefile_error_types remote_client_deletefile_error_types;

enum remote_client_cmd_error_types {
	REMOTE_CMD_OK = 0,
	REMOTE_CMD_COULD_NOT_ADD_TO_CMD_LOG = 1,
};
typedef enum remote_client_cmd_error_types remote_client_cmd_error_types;

enum remote_client_dirlist_error_types {
	REMOTE_DIRLIST_OK = 0,
	REMOTE_DIRLIST_DIRECTORY_DOES_NOT_EXIST = 1,
	REMOTE_DIRLIST_COULD_NOT_OPEN_DIR = 2,
};
typedef enum remote_client_dirlist_error_types remote_client_dirlist_error_types;

struct filehandle {
	int len;
	u_char bytes[MAX_FILEHANDLE_LEN];
};
typedef struct filehandle filehandle;

enum cmd_log_state {
	CMD_FREE = 0,
	CMD_INITIALISED = 1,
	CMD_RUNNING = 2,
	CMD_BG_RUNNING = 3,
	CMD_COMPLETED = 4,
	CMD_CANCELED_TIMELIMIT = 5,
	CMD_CANCELED_TIMEDOUT = 6,
	CMD_COMPLETED_TIMELIMIT = 7,
	CMD_COMPLETED_TIMEDOUT = 8,
	CMD_COMPLETION_LOST = 9,
};
typedef enum cmd_log_state cmd_log_state;

struct cmd_log_entry {
	u_int tag;
	u_int pid;
	Iu32 workqueueID;
	u_int state;
	int status;
	u_int start_time;
	u_int end_time;
	u_int timeout_at_time;
	bool_t fail_on_timeout;
	char cmdstring[MAX_CMD_LEN];
	char identstring[MAX_IDENT_LEN];
	char agent_log_pathname[MAX_PATHNAME_LEN];
	struct cmd_log_entry *next;
};
typedef struct cmd_log_entry cmd_log_entry;

struct cmd_log {
	cmd_log_entry *first;
	cmd_log_entry *last;
};
typedef struct cmd_log cmd_log;

struct remote_client_cntrl_args {
	bool_t clear_shared_memory_flag;
	int msglevel;
};
typedef struct remote_client_cntrl_args remote_client_cntrl_args;

struct remote_client_cntrl_res {
	int status;
	union {
	} remote_client_cntrl_res_u;
};
typedef struct remote_client_cntrl_res remote_client_cntrl_res;

struct remote_client_run_cmd_args {
	char *cmdstring;
	int msglevel;
};
typedef struct remote_client_run_cmd_args remote_client_run_cmd_args;

struct remote_client_run_cmd_outcome {
	int valid;
	char *outputline;
};
typedef struct remote_client_run_cmd_outcome remote_client_run_cmd_outcome;

struct remote_client_run_cmd_res {
	int status;
	union {
		remote_client_run_cmd_outcome outcome;
	} remote_client_run_cmd_res_u;
};
typedef struct remote_client_run_cmd_res remote_client_run_cmd_res;

struct stringlist {
	char *item;
	struct stringlist *next;
};
typedef struct stringlist stringlist;

struct remote_client_prepare_cmd_args {
	Iu32 timeout;
	char *cmdstring;
	char *identstring;
	bool_t fail_on_timeout;
	Iu32 actionresultID;
	Iu32 workqueueID;
	int msglevel;
};
typedef struct remote_client_prepare_cmd_args remote_client_prepare_cmd_args;

struct remote_client_prepare_cmd_outcome {
	u_int tag;
};
typedef struct remote_client_prepare_cmd_outcome remote_client_prepare_cmd_outcome;

struct remote_client_prepare_cmd_res {
	int status;
	union {
		remote_client_prepare_cmd_outcome outcome;
	} remote_client_prepare_cmd_res_u;
};
typedef struct remote_client_prepare_cmd_res remote_client_prepare_cmd_res;

typedef char *environmentvalue;

typedef struct envnode *envlist;

struct envnode {
	environmentvalue entry;
	envlist next;
};
typedef struct envnode envnode;

struct remote_client_execute_cmd_args {
	char *cmdstring;
	envlist environment_settings;
	int run_in_shell;
	int tag;
	Iu32 actionresultID;
	Iu32 workqueueID;
	int msglevel;
};
typedef struct remote_client_execute_cmd_args remote_client_execute_cmd_args;

struct remote_client_execute_cmd_outcome {
	int valid;
};
typedef struct remote_client_execute_cmd_outcome remote_client_execute_cmd_outcome;

struct remote_client_execute_cmd_res {
	int status;
	union {
		remote_client_execute_cmd_outcome outcome;
	} remote_client_execute_cmd_res_u;
};
typedef struct remote_client_execute_cmd_res remote_client_execute_cmd_res;

struct remote_client_cmd_args {
	char *cmdstring;
	stringlist environment_settings;
	char *identstring;
	int run_in_background;
	int run_in_shell;
	Iu32 timeout;
	bool_t fail_on_timeout;
	bool_t workqueueID_flag;
	Iu32 workqueueID;
	Iu32 actionresultID;
	char *sql_servername;
	char *sql_username;
	char *sql_password;
	char *sql_databasename;
	short sql_port;
	int msglevel;
};
typedef struct remote_client_cmd_args remote_client_cmd_args;

struct remote_client_cmd_outcome {
	u_int tag;
	int cmd_exit_code;
	int cmd_exit_signal;
};
typedef struct remote_client_cmd_outcome remote_client_cmd_outcome;

struct remote_client_cmd_res {
	int status;
	union {
		remote_client_cmd_outcome outcome;
	} remote_client_cmd_res_u;
};
typedef struct remote_client_cmd_res remote_client_cmd_res;

struct remote_client_query_version_args {
	u_int agent_major_version;
	u_int agent_minor_version;
	char *agent_version_string;
	bool_t set_zombie_reaper_debug_flag;
	bool_t reset_zombie_reaper_debug_flag;
	int msglevel;
};
typedef struct remote_client_query_version_args remote_client_query_version_args;

struct remote_client_query_version_outcome {
	u_int agent_major_version;
	u_int agent_minor_version;
	char *agent_version_string;
	char *agent_build_machine;
	bool_t p_osdata_is_valid;
	char *p_name;
	char *p_os_type;
	char *p_os_version;
	char *p_os_description;
	char *p_cpu_architecture;
};
typedef struct remote_client_query_version_outcome remote_client_query_version_outcome;

struct remote_client_query_version_res {
	int status;
	union {
		remote_client_query_version_outcome outcome;
	} remote_client_query_version_res_u;
};
typedef struct remote_client_query_version_res remote_client_query_version_res;

struct remote_client_query_tag_args {
	u_int tag;
	int msglevel;
};
typedef struct remote_client_query_tag_args remote_client_query_tag_args;

struct remote_client_query_tag_outcome {
	bool_t valid;
	u_int state;
	int cmd_exit_code;
	int cmd_exit_signal;
};
typedef struct remote_client_query_tag_outcome remote_client_query_tag_outcome;

struct remote_client_query_tag_res {
	int status;
	union {
		remote_client_query_tag_outcome outcome;
	} remote_client_query_tag_res_u;
};
typedef struct remote_client_query_tag_res remote_client_query_tag_res;

struct remote_client_query_alltags_args {
	int msglevel;
};
typedef struct remote_client_query_alltags_args remote_client_query_alltags_args;

struct remote_client_query_alltags_outcome {
	bool_t last;
	cmd_log cmd_log_fragment;
};
typedef struct remote_client_query_alltags_outcome remote_client_query_alltags_outcome;

struct remote_client_query_alltags_res {
	int status;
	union {
		remote_client_query_alltags_outcome outcome;
	} remote_client_query_alltags_res_u;
};
typedef struct remote_client_query_alltags_res remote_client_query_alltags_res;

struct remote_client_query_cmdlog_args {
	u_int index;
	int msglevel;
};
typedef struct remote_client_query_cmdlog_args remote_client_query_cmdlog_args;

struct remote_client_query_cmdlog_outcome {
	u_int tag;
	u_int pid;
	u_int state;
	u_int status;
	u_int start_time;
	u_int end_time;
	u_int timeout_at_time;
	bool_t fail_on_timeout;
	bool_t last;
	char *cmdstring;
	char *identstring;
	u_int workqueueID;
};
typedef struct remote_client_query_cmdlog_outcome remote_client_query_cmdlog_outcome;

struct remote_client_query_cmdlog_res {
	int status;
	union {
		remote_client_query_cmdlog_outcome outcome;
	} remote_client_query_cmdlog_res_u;
};
typedef struct remote_client_query_cmdlog_res remote_client_query_cmdlog_res;

struct remote_client_query_cmds_args {
	int msglevel;
};
typedef struct remote_client_query_cmds_args remote_client_query_cmds_args;

struct remote_client_query_cmds_outcome {
	u_int num_CMD_INITIALISED_commands;
	u_int num_CMD_RUNNING_commands;
	u_int num_CMD_COMPLETED_commands;
	u_int num_CMD_COMPLETED_good_status_commands;
	u_int num_CMD_COMPLETED_bad_status_commands;
};
typedef struct remote_client_query_cmds_outcome remote_client_query_cmds_outcome;

struct remote_client_query_cmds_res {
	int status;
	union {
		remote_client_query_cmds_outcome outcome;
	} remote_client_query_cmds_res_u;
};
typedef struct remote_client_query_cmds_res remote_client_query_cmds_res;

struct remote_client_get_unique_ident_args {
	int msglevel;
};
typedef struct remote_client_get_unique_ident_args remote_client_get_unique_ident_args;

struct remote_client_get_unique_ident_outcome {
	char *identstring;
};
typedef struct remote_client_get_unique_ident_outcome remote_client_get_unique_ident_outcome;

struct remote_client_get_unique_ident_res {
	int status;
	union {
		remote_client_get_unique_ident_outcome outcome;
	} remote_client_get_unique_ident_res_u;
};
typedef struct remote_client_get_unique_ident_res remote_client_get_unique_ident_res;

struct remote_client_query_ident_args {
	char *identstring;
	int msglevel;
};
typedef struct remote_client_query_ident_args remote_client_query_ident_args;

struct remote_client_query_ident_outcome {
	bool_t last;
	cmd_log cmd_log_fragment;
};
typedef struct remote_client_query_ident_outcome remote_client_query_ident_outcome;

struct remote_client_query_ident_res {
	int status;
	union {
		remote_client_query_ident_outcome outcome;
	} remote_client_query_ident_res_u;
};
typedef struct remote_client_query_ident_res remote_client_query_ident_res;

struct remote_client_clear_tag_args {
	u_int tag;
	int msglevel;
};
typedef struct remote_client_clear_tag_args remote_client_clear_tag_args;

struct remote_client_clear_tag_outcome {
	remote_client_clear_tag_error_types valid_clear;
};
typedef struct remote_client_clear_tag_outcome remote_client_clear_tag_outcome;

struct remote_client_clear_tag_res {
	int status;
	union {
		remote_client_clear_tag_outcome outcome;
	} remote_client_clear_tag_res_u;
};
typedef struct remote_client_clear_tag_res remote_client_clear_tag_res;

struct remote_client_cancel_tag_args {
	u_int tag;
	int msglevel;
};
typedef struct remote_client_cancel_tag_args remote_client_cancel_tag_args;

struct remote_client_cancel_tag_outcome {
	remote_client_cancel_tag_error_types valid_cancel;
};
typedef struct remote_client_cancel_tag_outcome remote_client_cancel_tag_outcome;

struct remote_client_cancel_tag_res {
	int status;
	union {
		remote_client_cancel_tag_outcome outcome;
	} remote_client_cancel_tag_res_u;
};
typedef struct remote_client_cancel_tag_res remote_client_cancel_tag_res;

struct remote_client_cancel_ident_args {
	char *identstring;
	int msglevel;
};
typedef struct remote_client_cancel_ident_args remote_client_cancel_ident_args;

struct remote_client_cancel_ident_outcome {
	remote_client_cancel_ident_error_types valid_cancel;
};
typedef struct remote_client_cancel_ident_outcome remote_client_cancel_ident_outcome;

struct remote_client_cancel_ident_res {
	int status;
	union {
		remote_client_cancel_ident_outcome outcome;
	} remote_client_cancel_ident_res_u;
};
typedef struct remote_client_cancel_ident_res remote_client_cancel_ident_res;

struct remote_client_clear_alltags_args {
	int msglevel;
};
typedef struct remote_client_clear_alltags_args remote_client_clear_alltags_args;

struct remote_client_clear_alltags_outcome {
	remote_client_clear_tag_error_types valid_clear;
};
typedef struct remote_client_clear_alltags_outcome remote_client_clear_alltags_outcome;

struct remote_client_clear_alltags_res {
	int status;
	union {
		remote_client_clear_alltags_outcome outcome;
	} remote_client_clear_alltags_res_u;
};
typedef struct remote_client_clear_alltags_res remote_client_clear_alltags_res;

struct remote_client_clear_ident_args {
	char *identstring;
	int msglevel;
};
typedef struct remote_client_clear_ident_args remote_client_clear_ident_args;

struct remote_client_clear_ident_outcome {
	remote_client_clear_ident_error_types valid_clear;
};
typedef struct remote_client_clear_ident_outcome remote_client_clear_ident_outcome;

struct remote_client_clear_ident_res {
	int status;
	union {
		remote_client_clear_ident_outcome outcome;
	} remote_client_clear_ident_res_u;
};
typedef struct remote_client_clear_ident_res remote_client_clear_ident_res;

struct remote_client_copyfile_args {
	char *remotepathname;
	bool_t fromremote;
	int requestedlength;
	struct {
		u_int data_len;
		char *data_val;
	} data;
	int offset;
	bool_t eof;
	int msglevel;
};
typedef struct remote_client_copyfile_args remote_client_copyfile_args;

struct remote_client_copyfile_outcome {
	bool_t valid_copyfile;
	int num_bytes_in_transfer;
	struct {
		u_int data_len;
		char *data_val;
	} data;
	bool_t eof;
};
typedef struct remote_client_copyfile_outcome remote_client_copyfile_outcome;

struct remote_client_copyfile_res {
	int status;
	union {
		remote_client_copyfile_outcome outcome;
	} remote_client_copyfile_res_u;
};
typedef struct remote_client_copyfile_res remote_client_copyfile_res;

struct remote_client_deletefile_args {
	char *remotepathname;
	int msglevel;
};
typedef struct remote_client_deletefile_args remote_client_deletefile_args;

struct remote_client_deletefile_outcome {
	bool_t valid_deletefile;
};
typedef struct remote_client_deletefile_outcome remote_client_deletefile_outcome;

struct remote_client_deletefile_res {
	int status;
	union {
		remote_client_deletefile_outcome outcome;
	} remote_client_deletefile_res_u;
};
typedef struct remote_client_deletefile_res remote_client_deletefile_res;

typedef char *direntrytype;

typedef struct dirnode *dirlist;

struct dirnode {
	direntrytype entry;
	dirlist next;
};
typedef struct dirnode dirnode;

struct remote_client_dirlist_args {
	char *remotepathname;
	int msglevel;
};
typedef struct remote_client_dirlist_args remote_client_dirlist_args;

struct remote_client_dirlist_outcome {
	bool_t valid_dirlist;
	dirlist directory;
};
typedef struct remote_client_dirlist_outcome remote_client_dirlist_outcome;

struct remote_client_dirlist_res {
	int status;
	union {
		remote_client_dirlist_outcome outcome;
	} remote_client_dirlist_res_u;
};
typedef struct remote_client_dirlist_res remote_client_dirlist_res;

typedef char *command_state;

struct remote_client_update_workqueue_status_args {
	Iu32 workqueueID;
	bool_t update_state;
	command_state state;
	bool_t update_tag;
	int tag;
	bool_t update_pass;
	int pass;
	bool_t update_end;
	int msglevel;
};
typedef struct remote_client_update_workqueue_status_args remote_client_update_workqueue_status_args;

struct remote_client_update_workqueue_status_outcome {
	bool_t valid_update;
};
typedef struct remote_client_update_workqueue_status_outcome remote_client_update_workqueue_status_outcome;

struct remote_client_update_workqueue_status_res {
	int status;
	union {
		remote_client_update_workqueue_status_outcome outcome;
	} remote_client_update_workqueue_status_res_u;
};
typedef struct remote_client_update_workqueue_status_res remote_client_update_workqueue_status_res;

#define DAF_PROG 500000001
#define DAF_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define CLIENT_REMOTE_CLIENT_CNTRL 41
extern  enum clnt_stat client_remote_client_cntrl_1(remote_client_cntrl_args *, remote_client_cntrl_res *, CLIENT *);
extern  bool_t client_remote_client_cntrl_1_svc(remote_client_cntrl_args *, remote_client_cntrl_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CMD 1
extern  enum clnt_stat client_remote_client_cmd_1(remote_client_cmd_args *, remote_client_cmd_res *, CLIENT *);
extern  bool_t client_remote_client_cmd_1_svc(remote_client_cmd_args *, remote_client_cmd_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_PREPARE_CMD 47
extern  enum clnt_stat client_remote_client_prepare_cmd_1(remote_client_prepare_cmd_args *, remote_client_prepare_cmd_res *, CLIENT *);
extern  bool_t client_remote_client_prepare_cmd_1_svc(remote_client_prepare_cmd_args *, remote_client_prepare_cmd_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_EXECUTE_CMD 48
extern  enum clnt_stat client_remote_client_execute_cmd_1(remote_client_execute_cmd_args *, remote_client_execute_cmd_res *, CLIENT *);
extern  bool_t client_remote_client_execute_cmd_1_svc(remote_client_execute_cmd_args *, remote_client_execute_cmd_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_RUN_CMD 49
extern  enum clnt_stat client_remote_client_run_cmd_1(remote_client_run_cmd_args *, remote_client_run_cmd_res *, CLIENT *);
extern  bool_t client_remote_client_run_cmd_1_svc(remote_client_run_cmd_args *, remote_client_run_cmd_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_VERSION 35
extern  enum clnt_stat client_remote_client_query_version_1(remote_client_query_version_args *, remote_client_query_version_res *, CLIENT *);
extern  bool_t client_remote_client_query_version_1_svc(remote_client_query_version_args *, remote_client_query_version_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_TAG 2
extern  enum clnt_stat client_remote_client_query_tag_1(remote_client_query_tag_args *, remote_client_query_tag_res *, CLIENT *);
extern  bool_t client_remote_client_query_tag_1_svc(remote_client_query_tag_args *, remote_client_query_tag_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_ALLTAGS 33
extern  enum clnt_stat client_remote_client_query_alltags_1(remote_client_query_alltags_args *, remote_client_query_alltags_res *, CLIENT *);
extern  bool_t client_remote_client_query_alltags_1_svc(remote_client_query_alltags_args *, remote_client_query_alltags_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_CMDLOG 3
extern  enum clnt_stat client_remote_client_query_cmdlog_1(remote_client_query_cmdlog_args *, remote_client_query_cmdlog_res *, CLIENT *);
extern  bool_t client_remote_client_query_cmdlog_1_svc(remote_client_query_cmdlog_args *, remote_client_query_cmdlog_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_GET_UNIQUE_IDENT 43
extern  enum clnt_stat client_remote_client_get_unique_ident_1(remote_client_get_unique_ident_args *, remote_client_get_unique_ident_res *, CLIENT *);
extern  bool_t client_remote_client_get_unique_ident_1_svc(remote_client_get_unique_ident_args *, remote_client_get_unique_ident_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_IDENT 37
extern  enum clnt_stat client_remote_client_query_ident_1(remote_client_query_ident_args *, remote_client_query_ident_res *, CLIENT *);
extern  bool_t client_remote_client_query_ident_1_svc(remote_client_query_ident_args *, remote_client_query_ident_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_QUERY_CMDS 40
extern  enum clnt_stat client_remote_client_query_cmds_1(remote_client_query_cmds_args *, remote_client_query_cmds_res *, CLIENT *);
extern  bool_t client_remote_client_query_cmds_1_svc(remote_client_query_cmds_args *, remote_client_query_cmds_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CLEAR_TAG 4
extern  enum clnt_stat client_remote_client_clear_tag_1(remote_client_clear_tag_args *, remote_client_clear_tag_res *, CLIENT *);
extern  bool_t client_remote_client_clear_tag_1_svc(remote_client_clear_tag_args *, remote_client_clear_tag_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CLEAR_IDENT 38
extern  enum clnt_stat client_remote_client_clear_ident_1(remote_client_clear_ident_args *, remote_client_clear_ident_res *, CLIENT *);
extern  bool_t client_remote_client_clear_ident_1_svc(remote_client_clear_ident_args *, remote_client_clear_ident_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CLEAR_ALLTAGS 5
extern  enum clnt_stat client_remote_client_clear_alltags_1(remote_client_clear_alltags_args *, remote_client_clear_alltags_res *, CLIENT *);
extern  bool_t client_remote_client_clear_alltags_1_svc(remote_client_clear_alltags_args *, remote_client_clear_alltags_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CANCEL_TAG 6
extern  enum clnt_stat client_remote_client_cancel_tag_1(remote_client_cancel_tag_args *, remote_client_cancel_tag_res *, CLIENT *);
extern  bool_t client_remote_client_cancel_tag_1_svc(remote_client_cancel_tag_args *, remote_client_cancel_tag_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_CANCEL_IDENT 39
extern  enum clnt_stat client_remote_client_cancel_ident_1(remote_client_cancel_ident_args *, remote_client_cancel_ident_res *, CLIENT *);
extern  bool_t client_remote_client_cancel_ident_1_svc(remote_client_cancel_ident_args *, remote_client_cancel_ident_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_COPYFILE 7
extern  enum clnt_stat client_remote_client_copyfile_1(remote_client_copyfile_args *, remote_client_copyfile_res *, CLIENT *);
extern  bool_t client_remote_client_copyfile_1_svc(remote_client_copyfile_args *, remote_client_copyfile_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_DELETEFILE 45
extern  enum clnt_stat client_remote_client_deletefile_1(remote_client_deletefile_args *, remote_client_deletefile_res *, CLIENT *);
extern  bool_t client_remote_client_deletefile_1_svc(remote_client_deletefile_args *, remote_client_deletefile_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_DIRLIST 44
extern  enum clnt_stat client_remote_client_dirlist_1(remote_client_dirlist_args *, remote_client_dirlist_res *, CLIENT *);
extern  bool_t client_remote_client_dirlist_1_svc(remote_client_dirlist_args *, remote_client_dirlist_res *, struct svc_req *);
#define CLIENT_REMOTE_CLIENT_UPDATE_WORKQUEUE_STATUS 46
extern  enum clnt_stat client_remote_client_update_workqueue_status_1(remote_client_update_workqueue_status_args *, remote_client_update_workqueue_status_res *, CLIENT *);
extern  bool_t client_remote_client_update_workqueue_status_1_svc(remote_client_update_workqueue_status_args *, remote_client_update_workqueue_status_res *, struct svc_req *);
extern int daf_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CLIENT_REMOTE_CLIENT_CNTRL 41
extern  enum clnt_stat client_remote_client_cntrl_1();
extern  bool_t client_remote_client_cntrl_1_svc();
#define CLIENT_REMOTE_CLIENT_CMD 1
extern  enum clnt_stat client_remote_client_cmd_1();
extern  bool_t client_remote_client_cmd_1_svc();
#define CLIENT_REMOTE_CLIENT_PREPARE_CMD 47
extern  enum clnt_stat client_remote_client_prepare_cmd_1();
extern  bool_t client_remote_client_prepare_cmd_1_svc();
#define CLIENT_REMOTE_CLIENT_EXECUTE_CMD 48
extern  enum clnt_stat client_remote_client_execute_cmd_1();
extern  bool_t client_remote_client_execute_cmd_1_svc();
#define CLIENT_REMOTE_CLIENT_RUN_CMD 49
extern  enum clnt_stat client_remote_client_run_cmd_1();
extern  bool_t client_remote_client_run_cmd_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_VERSION 35
extern  enum clnt_stat client_remote_client_query_version_1();
extern  bool_t client_remote_client_query_version_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_TAG 2
extern  enum clnt_stat client_remote_client_query_tag_1();
extern  bool_t client_remote_client_query_tag_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_ALLTAGS 33
extern  enum clnt_stat client_remote_client_query_alltags_1();
extern  bool_t client_remote_client_query_alltags_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_CMDLOG 3
extern  enum clnt_stat client_remote_client_query_cmdlog_1();
extern  bool_t client_remote_client_query_cmdlog_1_svc();
#define CLIENT_REMOTE_CLIENT_GET_UNIQUE_IDENT 43
extern  enum clnt_stat client_remote_client_get_unique_ident_1();
extern  bool_t client_remote_client_get_unique_ident_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_IDENT 37
extern  enum clnt_stat client_remote_client_query_ident_1();
extern  bool_t client_remote_client_query_ident_1_svc();
#define CLIENT_REMOTE_CLIENT_QUERY_CMDS 40
extern  enum clnt_stat client_remote_client_query_cmds_1();
extern  bool_t client_remote_client_query_cmds_1_svc();
#define CLIENT_REMOTE_CLIENT_CLEAR_TAG 4
extern  enum clnt_stat client_remote_client_clear_tag_1();
extern  bool_t client_remote_client_clear_tag_1_svc();
#define CLIENT_REMOTE_CLIENT_CLEAR_IDENT 38
extern  enum clnt_stat client_remote_client_clear_ident_1();
extern  bool_t client_remote_client_clear_ident_1_svc();
#define CLIENT_REMOTE_CLIENT_CLEAR_ALLTAGS 5
extern  enum clnt_stat client_remote_client_clear_alltags_1();
extern  bool_t client_remote_client_clear_alltags_1_svc();
#define CLIENT_REMOTE_CLIENT_CANCEL_TAG 6
extern  enum clnt_stat client_remote_client_cancel_tag_1();
extern  bool_t client_remote_client_cancel_tag_1_svc();
#define CLIENT_REMOTE_CLIENT_CANCEL_IDENT 39
extern  enum clnt_stat client_remote_client_cancel_ident_1();
extern  bool_t client_remote_client_cancel_ident_1_svc();
#define CLIENT_REMOTE_CLIENT_COPYFILE 7
extern  enum clnt_stat client_remote_client_copyfile_1();
extern  bool_t client_remote_client_copyfile_1_svc();
#define CLIENT_REMOTE_CLIENT_DELETEFILE 45
extern  enum clnt_stat client_remote_client_deletefile_1();
extern  bool_t client_remote_client_deletefile_1_svc();
#define CLIENT_REMOTE_CLIENT_DIRLIST 44
extern  enum clnt_stat client_remote_client_dirlist_1();
extern  bool_t client_remote_client_dirlist_1_svc();
#define CLIENT_REMOTE_CLIENT_UPDATE_WORKQUEUE_STATUS 46
extern  enum clnt_stat client_remote_client_update_workqueue_status_1();
extern  bool_t client_remote_client_update_workqueue_status_1_svc();
extern int daf_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_BOOL (XDR *, BOOL*);
extern  bool_t xdr_Iu64 (XDR *, Iu64*);
extern  bool_t xdr_Iu32 (XDR *, Iu32*);
extern  bool_t xdr_Iu16 (XDR *, Iu16*);
extern  bool_t xdr_Iu8 (XDR *, Iu8*);
extern  bool_t xdr_pathnamestring (XDR *, pathnamestring*);
extern  bool_t xdr_hostnamestring (XDR *, hostnamestring*);
extern  bool_t xdr_remote_client_error_types (XDR *, remote_client_error_types*);
extern  bool_t xdr_remote_client_clear_tag_error_types (XDR *, remote_client_clear_tag_error_types*);
extern  bool_t xdr_remote_client_clear_ident_error_types (XDR *, remote_client_clear_ident_error_types*);
extern  bool_t xdr_remote_client_query_alltags_error_types (XDR *, remote_client_query_alltags_error_types*);
extern  bool_t xdr_remote_client_cancel_tag_error_types (XDR *, remote_client_cancel_tag_error_types*);
extern  bool_t xdr_remote_client_cancel_ident_error_types (XDR *, remote_client_cancel_ident_error_types*);
extern  bool_t xdr_remote_client_copyfile_error_types (XDR *, remote_client_copyfile_error_types*);
extern  bool_t xdr_remote_client_deletefile_error_types (XDR *, remote_client_deletefile_error_types*);
extern  bool_t xdr_remote_client_cmd_error_types (XDR *, remote_client_cmd_error_types*);
extern  bool_t xdr_remote_client_dirlist_error_types (XDR *, remote_client_dirlist_error_types*);
extern  bool_t xdr_filehandle (XDR *, filehandle*);
extern  bool_t xdr_cmd_log_state (XDR *, cmd_log_state*);
extern  bool_t xdr_cmd_log_entry (XDR *, cmd_log_entry*);
extern  bool_t xdr_cmd_log (XDR *, cmd_log*);
extern  bool_t xdr_remote_client_cntrl_args (XDR *, remote_client_cntrl_args*);
extern  bool_t xdr_remote_client_cntrl_res (XDR *, remote_client_cntrl_res*);
extern  bool_t xdr_remote_client_run_cmd_args (XDR *, remote_client_run_cmd_args*);
extern  bool_t xdr_remote_client_run_cmd_outcome (XDR *, remote_client_run_cmd_outcome*);
extern  bool_t xdr_remote_client_run_cmd_res (XDR *, remote_client_run_cmd_res*);
extern  bool_t xdr_stringlist (XDR *, stringlist*);
extern  bool_t xdr_remote_client_prepare_cmd_args (XDR *, remote_client_prepare_cmd_args*);
extern  bool_t xdr_remote_client_prepare_cmd_outcome (XDR *, remote_client_prepare_cmd_outcome*);
extern  bool_t xdr_remote_client_prepare_cmd_res (XDR *, remote_client_prepare_cmd_res*);
extern  bool_t xdr_environmentvalue (XDR *, environmentvalue*);
extern  bool_t xdr_envlist (XDR *, envlist*);
extern  bool_t xdr_envnode (XDR *, envnode*);
extern  bool_t xdr_remote_client_execute_cmd_args (XDR *, remote_client_execute_cmd_args*);
extern  bool_t xdr_remote_client_execute_cmd_outcome (XDR *, remote_client_execute_cmd_outcome*);
extern  bool_t xdr_remote_client_execute_cmd_res (XDR *, remote_client_execute_cmd_res*);
extern  bool_t xdr_remote_client_cmd_args (XDR *, remote_client_cmd_args*);
extern  bool_t xdr_remote_client_cmd_outcome (XDR *, remote_client_cmd_outcome*);
extern  bool_t xdr_remote_client_cmd_res (XDR *, remote_client_cmd_res*);
extern  bool_t xdr_remote_client_query_version_args (XDR *, remote_client_query_version_args*);
extern  bool_t xdr_remote_client_query_version_outcome (XDR *, remote_client_query_version_outcome*);
extern  bool_t xdr_remote_client_query_version_res (XDR *, remote_client_query_version_res*);
extern  bool_t xdr_remote_client_query_tag_args (XDR *, remote_client_query_tag_args*);
extern  bool_t xdr_remote_client_query_tag_outcome (XDR *, remote_client_query_tag_outcome*);
extern  bool_t xdr_remote_client_query_tag_res (XDR *, remote_client_query_tag_res*);
extern  bool_t xdr_remote_client_query_alltags_args (XDR *, remote_client_query_alltags_args*);
extern  bool_t xdr_remote_client_query_alltags_outcome (XDR *, remote_client_query_alltags_outcome*);
extern  bool_t xdr_remote_client_query_alltags_res (XDR *, remote_client_query_alltags_res*);
extern  bool_t xdr_remote_client_query_cmdlog_args (XDR *, remote_client_query_cmdlog_args*);
extern  bool_t xdr_remote_client_query_cmdlog_outcome (XDR *, remote_client_query_cmdlog_outcome*);
extern  bool_t xdr_remote_client_query_cmdlog_res (XDR *, remote_client_query_cmdlog_res*);
extern  bool_t xdr_remote_client_query_cmds_args (XDR *, remote_client_query_cmds_args*);
extern  bool_t xdr_remote_client_query_cmds_outcome (XDR *, remote_client_query_cmds_outcome*);
extern  bool_t xdr_remote_client_query_cmds_res (XDR *, remote_client_query_cmds_res*);
extern  bool_t xdr_remote_client_get_unique_ident_args (XDR *, remote_client_get_unique_ident_args*);
extern  bool_t xdr_remote_client_get_unique_ident_outcome (XDR *, remote_client_get_unique_ident_outcome*);
extern  bool_t xdr_remote_client_get_unique_ident_res (XDR *, remote_client_get_unique_ident_res*);
extern  bool_t xdr_remote_client_query_ident_args (XDR *, remote_client_query_ident_args*);
extern  bool_t xdr_remote_client_query_ident_outcome (XDR *, remote_client_query_ident_outcome*);
extern  bool_t xdr_remote_client_query_ident_res (XDR *, remote_client_query_ident_res*);
extern  bool_t xdr_remote_client_clear_tag_args (XDR *, remote_client_clear_tag_args*);
extern  bool_t xdr_remote_client_clear_tag_outcome (XDR *, remote_client_clear_tag_outcome*);
extern  bool_t xdr_remote_client_clear_tag_res (XDR *, remote_client_clear_tag_res*);
extern  bool_t xdr_remote_client_cancel_tag_args (XDR *, remote_client_cancel_tag_args*);
extern  bool_t xdr_remote_client_cancel_tag_outcome (XDR *, remote_client_cancel_tag_outcome*);
extern  bool_t xdr_remote_client_cancel_tag_res (XDR *, remote_client_cancel_tag_res*);
extern  bool_t xdr_remote_client_cancel_ident_args (XDR *, remote_client_cancel_ident_args*);
extern  bool_t xdr_remote_client_cancel_ident_outcome (XDR *, remote_client_cancel_ident_outcome*);
extern  bool_t xdr_remote_client_cancel_ident_res (XDR *, remote_client_cancel_ident_res*);
extern  bool_t xdr_remote_client_clear_alltags_args (XDR *, remote_client_clear_alltags_args*);
extern  bool_t xdr_remote_client_clear_alltags_outcome (XDR *, remote_client_clear_alltags_outcome*);
extern  bool_t xdr_remote_client_clear_alltags_res (XDR *, remote_client_clear_alltags_res*);
extern  bool_t xdr_remote_client_clear_ident_args (XDR *, remote_client_clear_ident_args*);
extern  bool_t xdr_remote_client_clear_ident_outcome (XDR *, remote_client_clear_ident_outcome*);
extern  bool_t xdr_remote_client_clear_ident_res (XDR *, remote_client_clear_ident_res*);
extern  bool_t xdr_remote_client_copyfile_args (XDR *, remote_client_copyfile_args*);
extern  bool_t xdr_remote_client_copyfile_outcome (XDR *, remote_client_copyfile_outcome*);
extern  bool_t xdr_remote_client_copyfile_res (XDR *, remote_client_copyfile_res*);
extern  bool_t xdr_remote_client_deletefile_args (XDR *, remote_client_deletefile_args*);
extern  bool_t xdr_remote_client_deletefile_outcome (XDR *, remote_client_deletefile_outcome*);
extern  bool_t xdr_remote_client_deletefile_res (XDR *, remote_client_deletefile_res*);
extern  bool_t xdr_direntrytype (XDR *, direntrytype*);
extern  bool_t xdr_dirlist (XDR *, dirlist*);
extern  bool_t xdr_dirnode (XDR *, dirnode*);
extern  bool_t xdr_remote_client_dirlist_args (XDR *, remote_client_dirlist_args*);
extern  bool_t xdr_remote_client_dirlist_outcome (XDR *, remote_client_dirlist_outcome*);
extern  bool_t xdr_remote_client_dirlist_res (XDR *, remote_client_dirlist_res*);
extern  bool_t xdr_command_state (XDR *, command_state*);
extern  bool_t xdr_remote_client_update_workqueue_status_args (XDR *, remote_client_update_workqueue_status_args*);
extern  bool_t xdr_remote_client_update_workqueue_status_outcome (XDR *, remote_client_update_workqueue_status_outcome*);
extern  bool_t xdr_remote_client_update_workqueue_status_res (XDR *, remote_client_update_workqueue_status_res*);

#else /* K&R C */
extern bool_t xdr_BOOL ();
extern bool_t xdr_Iu64 ();
extern bool_t xdr_Iu32 ();
extern bool_t xdr_Iu16 ();
extern bool_t xdr_Iu8 ();
extern bool_t xdr_pathnamestring ();
extern bool_t xdr_hostnamestring ();
extern bool_t xdr_remote_client_error_types ();
extern bool_t xdr_remote_client_clear_tag_error_types ();
extern bool_t xdr_remote_client_clear_ident_error_types ();
extern bool_t xdr_remote_client_query_alltags_error_types ();
extern bool_t xdr_remote_client_cancel_tag_error_types ();
extern bool_t xdr_remote_client_cancel_ident_error_types ();
extern bool_t xdr_remote_client_copyfile_error_types ();
extern bool_t xdr_remote_client_deletefile_error_types ();
extern bool_t xdr_remote_client_cmd_error_types ();
extern bool_t xdr_remote_client_dirlist_error_types ();
extern bool_t xdr_filehandle ();
extern bool_t xdr_cmd_log_state ();
extern bool_t xdr_cmd_log_entry ();
extern bool_t xdr_cmd_log ();
extern bool_t xdr_remote_client_cntrl_args ();
extern bool_t xdr_remote_client_cntrl_res ();
extern bool_t xdr_remote_client_run_cmd_args ();
extern bool_t xdr_remote_client_run_cmd_outcome ();
extern bool_t xdr_remote_client_run_cmd_res ();
extern bool_t xdr_stringlist ();
extern bool_t xdr_remote_client_prepare_cmd_args ();
extern bool_t xdr_remote_client_prepare_cmd_outcome ();
extern bool_t xdr_remote_client_prepare_cmd_res ();
extern bool_t xdr_environmentvalue ();
extern bool_t xdr_envlist ();
extern bool_t xdr_envnode ();
extern bool_t xdr_remote_client_execute_cmd_args ();
extern bool_t xdr_remote_client_execute_cmd_outcome ();
extern bool_t xdr_remote_client_execute_cmd_res ();
extern bool_t xdr_remote_client_cmd_args ();
extern bool_t xdr_remote_client_cmd_outcome ();
extern bool_t xdr_remote_client_cmd_res ();
extern bool_t xdr_remote_client_query_version_args ();
extern bool_t xdr_remote_client_query_version_outcome ();
extern bool_t xdr_remote_client_query_version_res ();
extern bool_t xdr_remote_client_query_tag_args ();
extern bool_t xdr_remote_client_query_tag_outcome ();
extern bool_t xdr_remote_client_query_tag_res ();
extern bool_t xdr_remote_client_query_alltags_args ();
extern bool_t xdr_remote_client_query_alltags_outcome ();
extern bool_t xdr_remote_client_query_alltags_res ();
extern bool_t xdr_remote_client_query_cmdlog_args ();
extern bool_t xdr_remote_client_query_cmdlog_outcome ();
extern bool_t xdr_remote_client_query_cmdlog_res ();
extern bool_t xdr_remote_client_query_cmds_args ();
extern bool_t xdr_remote_client_query_cmds_outcome ();
extern bool_t xdr_remote_client_query_cmds_res ();
extern bool_t xdr_remote_client_get_unique_ident_args ();
extern bool_t xdr_remote_client_get_unique_ident_outcome ();
extern bool_t xdr_remote_client_get_unique_ident_res ();
extern bool_t xdr_remote_client_query_ident_args ();
extern bool_t xdr_remote_client_query_ident_outcome ();
extern bool_t xdr_remote_client_query_ident_res ();
extern bool_t xdr_remote_client_clear_tag_args ();
extern bool_t xdr_remote_client_clear_tag_outcome ();
extern bool_t xdr_remote_client_clear_tag_res ();
extern bool_t xdr_remote_client_cancel_tag_args ();
extern bool_t xdr_remote_client_cancel_tag_outcome ();
extern bool_t xdr_remote_client_cancel_tag_res ();
extern bool_t xdr_remote_client_cancel_ident_args ();
extern bool_t xdr_remote_client_cancel_ident_outcome ();
extern bool_t xdr_remote_client_cancel_ident_res ();
extern bool_t xdr_remote_client_clear_alltags_args ();
extern bool_t xdr_remote_client_clear_alltags_outcome ();
extern bool_t xdr_remote_client_clear_alltags_res ();
extern bool_t xdr_remote_client_clear_ident_args ();
extern bool_t xdr_remote_client_clear_ident_outcome ();
extern bool_t xdr_remote_client_clear_ident_res ();
extern bool_t xdr_remote_client_copyfile_args ();
extern bool_t xdr_remote_client_copyfile_outcome ();
extern bool_t xdr_remote_client_copyfile_res ();
extern bool_t xdr_remote_client_deletefile_args ();
extern bool_t xdr_remote_client_deletefile_outcome ();
extern bool_t xdr_remote_client_deletefile_res ();
extern bool_t xdr_direntrytype ();
extern bool_t xdr_dirlist ();
extern bool_t xdr_dirnode ();
extern bool_t xdr_remote_client_dirlist_args ();
extern bool_t xdr_remote_client_dirlist_outcome ();
extern bool_t xdr_remote_client_dirlist_res ();
extern bool_t xdr_command_state ();
extern bool_t xdr_remote_client_update_workqueue_status_args ();
extern bool_t xdr_remote_client_update_workqueue_status_outcome ();
extern bool_t xdr_remote_client_update_workqueue_status_res ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_DAF_PROTOCOL_H_RPCGEN */
